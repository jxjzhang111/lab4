# Fill in your name, student ID, and email address in this file.
# If you are working in a team, fill out the information for both team 
# members.

# SUBMIT THE LAB ONLY ONCE (from only one partner). This file will be
# automatically parsed in order to give both team members credit for the
# lab.

# You need to fill in the EXERCISE sections describing your solutions
# for Tasks 1, 2, and 3, as well as write the corresponding code.
# If you did one or more extra credit problems, indicate which one in the
# appropriate section below (remove the # sign first). If you have any other
# information you'd like us to know, please add it at the end of the file.

# Partner 1
Name: Jennifer Zhang
Student ID: 504356174
Email: jxjzhang@cs.ucla.edu

# Partner 2 (if you're working in a team)
# Name: Yi-An Lai
# Student ID: 304271741
# Email: lai61616@ucla.edu

# EXERCISE 1: What method you used to make your peer download and upload
#    files in parallel?  (~1-3 sentences)
Used fork() to download and upload the any single requested file in parallel.
Created a new function upload_files that makes use of select() and fork() to upload.
(Sidenote: Calling fork() after task_listen had mixed results; other peers were able to download hosted files, but run-good bot peers responded with empty file errors. Using only select was not parallel from observation of sending infinite data)

# EXERCISE 2A: What conditions did you find and fix that would have
#    triggered a buffer overrun bug?  (~1-3 sentences each)

In task_upload, osp2p_snscanf can copy a string longer than FILENAMESIZ into t->filename.
This was fixed by checking the length of the buf that was read_to_taskbuf before calling snscanf.

In start_download, there is an unprotected call to strcpy on the filename requested for download. Even though this is primarily a precaution against a command line argument, a strlen check is made here.

When calling read_tracker_response, it only reads the first 4096 bytes of data from the tracker, which is insufficient for the popular tracker (too many peers). Dynamically reallocate the size of the buf when it detects that that overflow occurs. Caveat: since the entire response from the tracker is read into memory, it may cause memory overflow if there are vast numbers of peers.

parse_peer uses snscanf without checking for the length of the peer string; added a check for this. However, this is unlikely to occur because the length of a telnet request is limited in length when sending an ADDR request.

# EXERCISE 2B: What other robustness problems did you fix?  (~1-3 sentences
#    each)

Added a check in task_upload that ensures that it only uploads files in the current directory; this uses the same logic that the skeleton code uses to register files initially.

Added MAXFILESIZ (arbitrarily set to 10 Mbytes) that defines a cap on a downloaded file. 
In task_download, a download that exceeds this size is killed and we move on to avoid infinite disk fill-up attacks.

Sporadically, the tracker does not give a list of peers (or peers are unavailable) when asking for a file and instead says that no peers are available. To alleviate this, a retry was added in the download section.

Added TIMEOUT, which determines the maximum number of milliseconds between downloaded chunks in task_download before moving onto a different peer. Empirically, 1s is still enough that the slow peer will successfully upload to the client. This is mainly to prevent evil peers that intentionally upload extremely slowly.

# EXERCISE 3: Describe the attacks you implemented for "evil mode".  Why
#    are they attacks?  (~3-10 sentences each)

evil_mode finds the list of peers using WHO, and then attempts to download files not inside the test directory, e.g. “../answers.txt” saved under “stolen_file”
This falls under the category of unauthorized access, and was executed with some success before everyone implemented task 2 correctly.

evil_mode attempts to filename overflow every peer that it finds from WHO (overload_request).

When a file is requested (if does exist), task_upload either sends an infinite data bomb or the wrong file.

When a file is requested and it does not exist, evil_mode sends a different file entirely (rickroll.mp3). In a P2P setting, this is the equivalent of sending a virus instead of the target file.

In register_files, evil mode registers files regardless of whether if passes the md5 checksum to propagate corrupt files in the tracker for users that didn’t implement md5 checking.

spam_md5 registers bad MD5SUM values for a large number of potential file names, in hopes that it will prevent a peer from successfully registering additional files to the server, or that a peer looking to download this file will never be able to corroborate its contents via checksum.

ddos_download will submit 1000 download requests to the same peer, which (among other situations) will cause errors in any peers that use fork(). Unfortunately, our code is still vulnerable to this DDOS attack.

# Extra credit problems
Extra credit problem: MD5

Added md5_digest function that calculates and returns the MD5 checksum.
Tracker reported MD5 checksum is stored in the task struct, and parsed in start_download.
task_download calculates the MD5 checksum of the file received, and crosschecks against the tracker’s checksum; if there is a mismatch, it tries to download again vs a different peer. Registering the file with HAVE includes the checksum, both in task_download and register_files. 

# Add any other information you'd like us to know below this line.
