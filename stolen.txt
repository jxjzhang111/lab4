# Fill in your name, student ID, and email address in this file.
# If you are working in a team, fill out the information for both team 
# members.

# SUBMIT THE LAB ONLY ONCE (from only one partner). This file will be
# automatically parsed in order to give both team members credit for the
# lab.

# You need to fill in the EXERCISE sections describing your solutions
# for Tasks 1, 2, and 3, as well as write the corresponding code.
# If you did one or more extra credit problems, indicate which one in the
# appropriate section below (remove the # sign first). If you have any other
# information you'd like us to know, please add it at the end of the file.

# Partner 1
Name: Stanley Ku
Student ID: 403576238
Email: stanleyku@ucla.edu

# Partner 2 (if you're working in a team)
# Name: 
# Student ID: 
# Email: 

# EXERCISE 1: What method you used to make your peer download and upload
#    files in parallel?  (~1-3 sentences)
For each download/upload in the list, the parent process forks a child process to handle the download/upload. The parent process continues and processes the next download/upload. Once download/upload is finished, the child process exists.

# EXERCISE 2A: What conditions did you find and fix that would have
#    triggered a buffer overrun bug?  (~1-3 sentences each)
The filename is limited to a certain length, which is already defined by FILENAMESIZ. This ensures that an exceedingly length filename will not overflow the buffer.

# EXERCISE 2B: What other robustness problems did you fix?  (~1-3 sentences
#    each)
A peer request is restricted to files in the local directory by checking for valid file path. Downloads are restricted to a max file size, which is defined by FILESIZ. This ensure that a malicious file will not fill up the hard disk.

# EXERCISE 3: Describe the attacks you implemented for "evil mode".  Why
#    are they attacks?  (~3-10 sentences each)
In a normal upload, the transfer ends after reaching end of the file. However in "evil mode", when reaching the end of file, the pointer is reset back to the beginning of the file so the upload never ends. Tt will continuously transfer data to the peer in an attempt to fill peer's entire hard disk.

# Extra credit problems
#Extra credit problem: none


# Add any other information you'd like us to know below this line.
